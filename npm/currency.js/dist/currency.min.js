!function(t, e) {
    "object" == typeof exports && "undefined" != typeof module ? module.exports = e() : "function" == typeof define && define.amd ? define(e) : t.currency = e();
}(this, function() {
    function t(a, o) {
        if (!(this instanceof t)) return new t(a, o);
        o = Object.assign({}, i, o);
        var s = Math.pow(10, o.precision);
        this.intValue = a = e(a, o), this.value = a / s, o.increment = o.increment || 1 / s, 
        o.groups = o.useVedic ? r : n, this.s = o, this.p = s;
    }
    function e(e, i) {
        var n = !(2 < arguments.length && void 0 !== arguments[2]) || arguments[2], r = i.decimal, a = i.errorOnInvalid, o = Math.pow(10, i.precision), s = "number" == typeof e;
        if (s || e instanceof t) o *= s ? e : e.value; else if ("string" == typeof e) a = new RegExp("[^-\\d" + r + "]", "g"), 
        r = new RegExp("\\" + r, "g"), o = (o *= e.replace(/\((.*)\)/, "-$1").replace(a, "").replace(r, ".")) || 0; else {
            if (a) throw Error("Invalid Input");
            o = 0;
        }
        return o = o.toFixed(4), n ? Math.round(o) : o;
    }
    var i = {
        symbol: "$",
        separator: ",",
        decimal: ".",
        formatWithSymbol: !1,
        errorOnInvalid: !1,
        precision: 2,
        pattern: "!#",
        negativePattern: "-!#"
    }, n = /(\d)(?=(\d{3})+\b)/g, r = /(\d)(?=(\d\d)+\d\b)/g;
    return t.prototype = {
        add: function(i) {
            var n = this.s, r = this.p;
            return t((this.intValue + e(i, n)) / r, n);
        },
        subtract: function(i) {
            var n = this.s, r = this.p;
            return t((this.intValue - e(i, n)) / r, n);
        },
        multiply: function(e) {
            var i = this.s;
            return t(this.intValue * e / Math.pow(10, i.precision), i);
        },
        divide: function(i) {
            var n = this.s;
            return t(this.intValue / e(i, n, !1), n);
        },
        distribute: function(e) {
            for (var i = this.intValue, n = this.p, r = this.s, a = [], o = Math[0 <= i ? "floor" : "ceil"](i / e), s = Math.abs(i - o * e); 0 !== e; e--) {
                var u = t(o / n, r);
                0 < s-- && (u = 0 <= i ? u.add(1 / n) : u.subtract(1 / n)), a.push(u);
            }
            return a;
        },
        dollars: function() {
            return ~~this.value;
        },
        cents: function() {
            return ~~(this.intValue % this.p);
        },
        format: function(t) {
            var e = this.s, i = e.pattern, n = e.negativePattern, r = e.formatWithSymbol, a = e.symbol, o = e.separator, s = e.decimal;
            e = e.groups;
            var u = (this + "").replace(/^-/, "").split("."), c = u[0];
            return u = u[1], void 0 === t && (t = r), (0 <= this.value ? i : n).replace("!", t ? a : "").replace("#", "".concat(c.replace(e, "$1" + o)).concat(u ? s + u : ""));
        },
        toString: function() {
            var t = this.s, e = t.increment;
            return (Math.round(this.intValue / this.p / e) * e).toFixed(t.precision);
        },
        toJSON: function() {
            return this.value;
        }
    }, t;
});